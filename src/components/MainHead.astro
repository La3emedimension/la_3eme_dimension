---
import '../styles/global.css';

interface Props {
	title?: string | undefined;
	description?: string | undefined;
}

const {
	title = 'La 3ème dimension',
	description = 'La 3ème dimension',
} = Astro.props;
---
<meta charset="UTF-8" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="sitemap" href="/sitemap-index.xml" />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />

<!-- HTML Meta Tags -->
<title>La 3ème dimension</title>
<meta name="description" content="La 3ème dimension">

<!-- Facebook Meta Tags -->
<meta property="og:url" content="https://la3emedim.fr">
<meta property="og:type" content="website">
<meta property="og:title" content="La 3ème dimension">
<meta property="og:description" content="La 3ème dimension">
<meta property="og:image" content="https://opengraph.b-cdn.net/production/images/3758858d-5434-49b1-ae27-f0b97ab73095.png?token=xb5Sy25BH8ia-vRr7OVszfxkf20WVp8SkJDWuZyPleo&height=675&width=1200&expires=33271940480">

<!-- Twitter Meta Tags -->
<meta name="twitter:card" content="summary_large_image">
<meta property="twitter:domain" content="la3emedim.fr">
<meta property="twitter:url" content="https://la3emedim.fr">
<meta name="twitter:title" content="La 3ème dimension">
<meta name="twitter:description" content="La 3ème dimension">
<meta name="twitter:image" content="https://opengraph.b-cdn.net/production/images/3758858d-5434-49b1-ae27-f0b97ab73095.png?token=xb5Sy25BH8ia-vRr7OVszfxkf20WVp8SkJDWuZyPleo&height=675&width=1200&expires=33271940480">

<script defer data-domain="la3emedim.fr" src="https://stats.documents.design/js/script.js"></script>

<title>{title}</title>


<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
	rel="stylesheet"
/>

<script is:inline>
	// This code is inlined in the head to make dark mode instant & blocking.
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark');

	if (typeof localStorage !== 'undefined') {
		// Watch the document element and persist user preference when it changes.
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('theme-dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>