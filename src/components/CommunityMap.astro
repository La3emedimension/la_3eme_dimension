---
import { getCollection } from 'astro:content';

interface Props {
  title?: string;
  height?: string;
}

const { title = "Carte de la communaut√©", height = "400px" } = Astro.props;

const builds = await getCollection('builds', ({ data }) => {
  return import.meta.env.DEV || !data.draft;
});

const buildsJson = JSON.stringify(builds.map(build => ({
  id: build.id,
  title: build.data.title,
  author: build.data.author,
  description: build.data.description,
  webLink: build.data.webLink,
  lat: build.data.latitude,
  lng: build.data.longitude,
  mainPhoto: build.data.mainPhoto,
  additionalPhotos: build.data.additionalPhotos || []
})));
---

<section class="community-map-section">
  <div class="container">
    <h2>{title}</h2>
    <div class="map-container" style={`height: ${height}`}>
      <div id="community-map" data-builds={buildsJson}></div>
    </div>
  </div>
  
  <!-- Modal mobile pour les d√©tails des builds -->
  <div id="build-modal" class="build-modal">
    <div class="build-modal-content">
      <div class="build-modal-header">
        <h3 id="modal-title"></h3>
        <button id="modal-close" class="modal-close">&times;</button>
      </div>
      <div class="build-modal-body">
        <div id="modal-image-container" class="modal-image-container">
          <img id="modal-main-image" class="modal-main-image" />
        </div>
        <div id="modal-info" class="modal-info">
          <p id="modal-author"></p>
          <p id="modal-description"></p>
          <div id="modal-link-container"></div>
        </div>
        <div id="modal-gallery" class="modal-gallery"></div>
      </div>
    </div>
  </div>
  
  <!-- Overlay pour fermer le modal -->
  <div id="modal-overlay" class="modal-overlay"></div>
  
  <!-- Lightbox pour voir les images en grand -->
  <div id="image-lightbox" class="image-lightbox">
    <div class="lightbox-content">
      <button id="lightbox-close" class="lightbox-close">&times;</button>
      <button id="lightbox-prev" class="lightbox-nav lightbox-prev">‚Äπ</button>
      <button id="lightbox-next" class="lightbox-nav lightbox-next">‚Ä∫</button>
      <img id="lightbox-image" class="lightbox-image" />
      <div class="lightbox-counter">
        <span id="lightbox-current">1</span> / <span id="lightbox-total">1</span>
      </div>
    </div>
  </div>
  
  <!-- Overlay du lightbox -->
  <div id="lightbox-overlay" class="lightbox-overlay"></div>
  
  <!-- Carte plein √©cran mobile -->
  <div id="fullscreen-map-container" class="fullscreen-map-container">
    <div class="fullscreen-map-header">
      <h3>Carte de la communaut√©</h3>
      <button id="fullscreen-close" class="fullscreen-close">&times;</button>
    </div>
    <div id="fullscreen-map" class="fullscreen-map"></div>
    <div class="fullscreen-instructions">
      üì± Appui long sur la carte pour obtenir vos coordonn√©es
    </div>
  </div>
</section>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

<script>
  import 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
  
  document.addEventListener('DOMContentLoaded', function() {
    const mapElement = document.getElementById('community-map');
    if (!mapElement) return;
    
    const buildsData = JSON.parse(mapElement.dataset.builds || '[]');
    
    // Initialiser la carte centr√©e sur la France avec options mobiles
    const map = L.map('community-map', {
      tap: true,
      touchZoom: true,
      zoomControl: true,
      maxZoom: 18,
      minZoom: 3
    }).setView([46.603354, 1.888334], 6);
    
    // Ajouter les tuiles OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '¬© OpenStreetMap contributors'
    }).addTo(map);
    
    // Cr√©er une ic√¥ne personnalis√©e pour les builds
    const createBuildIcon = (photoUrl) => {
      return L.divIcon({
        className: 'build-marker',
        html: `<div class="build-marker-inner">
                 <img src="${photoUrl}" alt="Build photo" />
               </div>`,
        iconSize: [50, 50],
        iconAnchor: [25, 25]
      });
    };
    
    // Variable pour stocker les coordonn√©es cliqu√©es
    let clickedCoords = null;
    
    // Fonction pour copier les coordonn√©es
    const copyCoordinates = (lat, lng) => {
      const coordsText = `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
      if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(coordsText).then(() => {
          showCoordinatesMessage(`Coordonn√©es copi√©es: ${coordsText}`);
        });
      } else {
        showCoordinatesMessage(`Coordonn√©es: ${coordsText} (copiez manuellement)`);
      }
    };
    
    // Fonction pour afficher le message de coordonn√©es
    const showCoordinatesMessage = (message) => {
      const existing = document.querySelector('.coords-toast');
      if (existing) existing.remove();
      
      const toast = document.createElement('div');
      toast.className = 'coords-toast';
      toast.textContent = message;
      document.body.appendChild(toast);
      
      setTimeout(() => toast.remove(), 4000);
    };
    
    // D√©tection mobile vs desktop
    const isMobile = window.innerWidth <= 768;
    
    // Fonction pour configurer la gestion des coordonn√©es
    const setupCoordinateHandling = (mapInstance) => {
      let touchTimer;
      let isLongPress = false;
      let clickedCoords = null;
      
      mapInstance.on('click', function(e) {
        if (!isLongPress) return;
        isLongPress = false;
        
        const { lat, lng } = e.latlng;
        const coordsText = `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
        
        if (navigator.clipboard && window.isSecureContext) {
          navigator.clipboard.writeText(coordsText).then(() => {
            showCoordinatesMessage(`Coordonn√©es copi√©es: ${coordsText}`);
          });
        } else {
          showCoordinatesMessage(`Coordonn√©es: ${coordsText} (copiez manuellement)`);
        }
        
        // Ajouter un marqueur temporaire
        if (clickedCoords) mapInstance.removeLayer(clickedCoords);
        clickedCoords = L.marker([lat, lng], {
          icon: L.divIcon({
            className: 'temp-marker',
            html: '<div class="temp-marker-inner">üìç</div>',
            iconSize: [30, 30],
            iconAnchor: [15, 15]
          })
        }).addTo(mapInstance);
        
        setTimeout(() => {
          if (clickedCoords) {
            mapInstance.removeLayer(clickedCoords);
            clickedCoords = null;
          }
        }, 5000);
      });
      
      mapInstance.on('touchstart', function() {
        touchTimer = setTimeout(() => {
          isLongPress = true;
        }, 500);
      });
      
      mapInstance.on('touchend touchcancel', function() {
        clearTimeout(touchTimer);
        setTimeout(() => { isLongPress = false; }, 100);
      });
    };
    
    // Sur desktop : ajouter la gestion des coordonn√©es par appui long
    if (!isMobile) {
      setupCoordinateHandling(map);
    }
    
    // Variables globales pour le lightbox
    let currentImages = [];
    let currentImageIndex = 0;
    
    // Fonction pour ouvrir le lightbox
    const openLightbox = (images, startIndex = 0) => {
      currentImages = images;
      currentImageIndex = startIndex;
      
      const lightbox = document.getElementById('image-lightbox');
      const overlay = document.getElementById('lightbox-overlay');
      const lightboxImage = document.getElementById('lightbox-image');
      const currentSpan = document.getElementById('lightbox-current');
      const totalSpan = document.getElementById('lightbox-total');
      
      lightboxImage.src = currentImages[currentImageIndex];
      currentSpan.textContent = currentImageIndex + 1;
      totalSpan.textContent = currentImages.length;
      
      lightbox.classList.add('active');
      overlay.classList.add('active');
      
      // Gestion des boutons de navigation
      updateLightboxButtons();
    };
    
    // Fonction pour mettre √† jour les boutons du lightbox
    const updateLightboxButtons = () => {
      const prevBtn = document.getElementById('lightbox-prev');
      const nextBtn = document.getElementById('lightbox-next');
      
      prevBtn.style.display = currentImages.length > 1 ? 'block' : 'none';
      nextBtn.style.display = currentImages.length > 1 ? 'block' : 'none';
    };
    
    // Fonction pour fermer le lightbox
    const closeLightbox = () => {
      const lightbox = document.getElementById('image-lightbox');
      const overlay = document.getElementById('lightbox-overlay');
      lightbox.classList.remove('active');
      overlay.classList.remove('active');
    };
    
    // Navigation dans le lightbox
    const showPrevImage = () => {
      if (currentImageIndex > 0) {
        currentImageIndex--;
        document.getElementById('lightbox-image').src = currentImages[currentImageIndex];
        document.getElementById('lightbox-current').textContent = currentImageIndex + 1;
      }
    };
    
    const showNextImage = () => {
      if (currentImageIndex < currentImages.length - 1) {
        currentImageIndex++;
        document.getElementById('lightbox-image').src = currentImages[currentImageIndex];
        document.getElementById('lightbox-current').textContent = currentImageIndex + 1;
      }
    };
    
    // Gestionnaires d'√©v√©nements pour le lightbox
    document.getElementById('lightbox-close').addEventListener('click', closeLightbox);
    document.getElementById('lightbox-overlay').addEventListener('click', closeLightbox);
    document.getElementById('lightbox-prev').addEventListener('click', showPrevImage);
    document.getElementById('lightbox-next').addEventListener('click', showNextImage);
    
    // Navigation au clavier pour le lightbox
    document.addEventListener('keydown', (e) => {
      const lightbox = document.getElementById('image-lightbox');
      if (lightbox.classList.contains('active')) {
        if (e.key === 'Escape') closeLightbox();
        if (e.key === 'ArrowLeft') showPrevImage();
        if (e.key === 'ArrowRight') showNextImage();
      }
    });
    
    // Fonction pour ouvrir le modal mobile
    const openBuildModal = (build) => {
      const modal = document.getElementById('build-modal');
      const overlay = document.getElementById('modal-overlay');
      
      // Cr√©er la liste de toutes les images pour le lightbox
      const allImages = [build.mainPhoto, ...build.additionalPhotos];
      
      // Remplir les donn√©es du modal
      document.getElementById('modal-title').textContent = build.title;
      document.getElementById('modal-author').innerHTML = `<strong>Par:</strong> ${build.author}`;
      document.getElementById('modal-description').textContent = build.description || '';
      
      // Image principale cliquable
      const mainImage = document.getElementById('modal-main-image');
      mainImage.src = build.mainPhoto;
      mainImage.alt = build.title;
      mainImage.style.cursor = 'pointer';
      mainImage.addEventListener('click', () => {
        openLightbox(allImages, 0);
      });
      
      // Lien web si disponible
      const linkContainer = document.getElementById('modal-link-container');
      if (build.webLink) {
        linkContainer.innerHTML = `<a href="${build.webLink}" target="_blank" rel="noopener" class="modal-link">Voir le projet ‚Üí</a>`;
      } else {
        linkContainer.innerHTML = '';
      }
      
      // Galerie d'images suppl√©mentaires cliquables
      const gallery = document.getElementById('modal-gallery');
      if (build.additionalPhotos.length > 0) {
        // Texte diff√©rent selon mobile/desktop
        const galleryTitle = isMobile ? '<h4>Photos suppl√©mentaires</h4>' : '<h4>Photos suppl√©mentaires (cliquez pour agrandir)</h4>';
        gallery.innerHTML = galleryTitle;
        build.additionalPhotos.forEach((photo, index) => {
          const img = document.createElement('img');
          img.src = photo;
          img.alt = 'Photo suppl√©mentaire';
          img.className = 'modal-gallery-thumb';
          img.style.cursor = 'pointer';
          img.addEventListener('click', () => {
            openLightbox(allImages, index + 1);
          });
          gallery.appendChild(img);
        });
      } else {
        gallery.innerHTML = '';
      }
      
      // Afficher le modal avec un l√©ger d√©lai pour √©viter les conflits
      setTimeout(() => {
        modal.classList.add('active');
        overlay.classList.add('active');
        document.body.style.overflow = 'hidden';
      }, 50);
    };
    
    // Fonction pour fermer le modal
    const closeBuildModal = () => {
      const modal = document.getElementById('build-modal');
      const overlay = document.getElementById('modal-overlay');
      modal.classList.remove('active');
      overlay.classList.remove('active');
      document.body.style.overflow = 'auto';
      
      // R√©activer les interactions de la carte
      map.dragging.enable();
      map.touchZoom.enable();
      map.doubleClickZoom.enable();
      map.scrollWheelZoom.enable();
    };
    
    // Gestionnaires d'√©v√©nements pour fermer le modal
    document.getElementById('modal-close').addEventListener('click', closeBuildModal);
    document.getElementById('modal-overlay').addEventListener('click', closeBuildModal);
    
    // Fermer avec la touche Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') closeBuildModal();
    });
    
    // Variable pour la carte plein √©cran
    let fullscreenMap = null;
    
    // Fonction pour ouvrir la carte en plein √©cran (mobile)
    const openFullscreenMap = () => {
      const container = document.getElementById('fullscreen-map-container');
      const fullscreenMapDiv = document.getElementById('fullscreen-map');
      
      // Afficher le container plein √©cran
      container.classList.add('active');
      document.body.style.overflow = 'hidden';
      
      // Cr√©er une nouvelle carte plein √©cran
      setTimeout(() => {
        fullscreenMap = L.map('fullscreen-map', {
          tap: true,
          touchZoom: true,
          zoomControl: true,
          maxZoom: 18,
          minZoom: 3
        }).setView([46.603354, 1.888334], 6);
        
        // Ajouter les tuiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '¬© OpenStreetMap contributors'
        }).addTo(fullscreenMap);
        
        // Ajouter tous les marqueurs √† la carte plein √©cran
        buildsData.forEach(build => {
          const marker = L.marker([build.lat, build.lng], {
            icon: createBuildIcon(build.mainPhoto)
          }).addTo(fullscreenMap);
          
          // Utiliser le modal m√™me en plein √©cran
          marker.on('click', (e) => {
            e.originalEvent.stopPropagation();
            e.originalEvent.preventDefault();
            openBuildModal(build);
          });
        });
        
        // Ajuster la vue aux marqueurs
        if (buildsData.length > 0) {
          const group = new L.featureGroup(
            buildsData.map(build => L.marker([build.lat, build.lng]))
          );
          fullscreenMap.fitBounds(group.getBounds().pad(0.1));
        }
        
        // Gestion coordonn√©es sur carte plein √©cran
        setupCoordinateHandling(fullscreenMap);
      }, 100);
    };
    
    // Fonction pour fermer la carte plein √©cran
    const closeFullscreenMap = () => {
      const container = document.getElementById('fullscreen-map-container');
      container.classList.remove('active');
      document.body.style.overflow = 'auto';
      
      // D√©truire la carte plein √©cran
      if (fullscreenMap) {
        fullscreenMap.remove();
        fullscreenMap = null;
      }
    };
    
    // Gestionnaires pour la carte plein √©cran
    if (isMobile) {
      // Ajouter un bouton "Voir en plein √©cran" sur mobile
      const mapContainer = document.querySelector('.map-container');
      
      if (mapContainer) {
        // S'assurer qu'il n'y a pas d√©j√† un bouton
        const existingBtn = mapContainer.querySelector('.fullscreen-toggle-btn');
        if (existingBtn) {
          existingBtn.remove();
        }
        
        const fullscreenBtn = document.createElement('button');
        fullscreenBtn.className = 'fullscreen-toggle-btn';
        fullscreenBtn.innerHTML = 'üîç Voir en plein √©cran';
        fullscreenBtn.style.cssText = `
          position: absolute;
          top: 1rem;
          right: 1rem;
          background: var(--accent-regular);
          color: white;
          border: none;
          padding: 0.75rem 1rem;
          border-radius: 0.5rem;
          font-size: 0.9rem;
          font-weight: 500;
          cursor: pointer;
          z-index: 1000;
          box-shadow: 0 4px 6px rgba(0,0,0,0.3);
        `;
        fullscreenBtn.addEventListener('click', openFullscreenMap);
        mapContainer.appendChild(fullscreenBtn);
      }
    }
    
    // Gestionnaire pour fermer le plein √©cran
    document.getElementById('fullscreen-close').addEventListener('click', closeFullscreenMap);
    
    // Ajouter les marqueurs pour chaque build
    buildsData.forEach(build => {
      const marker = L.marker([build.lat, build.lng], {
        icon: createBuildIcon(build.mainPhoto)
      }).addTo(map);
      
      if (!isMobile) {
        // Sur desktop uniquement : utiliser le popup classique
        let popupContent = `
          <div class="build-popup">
            <div class="build-popup-header">
              <img src="${build.mainPhoto}" alt="${build.title}" class="build-popup-image" />
            </div>
            <div class="build-popup-content">
              <h3>${build.title}</h3>
              <p><strong>Par:</strong> ${build.author}</p>
              ${build.description ? `<p class="build-description">${build.description}</p>` : ''}
              ${build.webLink ? `<p><a href="${build.webLink}" target="_blank" rel="noopener">Voir le projet ‚Üí</a></p>` : ''}
            </div>
          </div>
        `;
        
        // Si des photos suppl√©mentaires existent, les ajouter
        if (build.additionalPhotos.length > 0) {
          popupContent += '<div class="build-popup-gallery">';
          build.additionalPhotos.forEach(photo => {
            popupContent += `<img src="${photo}" alt="Photo suppl√©mentaire" class="build-popup-thumb" />`;
          });
          popupContent += '</div>';
        }
        
        const popup = L.popup({
          maxWidth: 400,
          minWidth: 300,
          maxHeight: 500,
          className: 'build-popup-container'
        }).setContent(popupContent);
        
        marker.bindPopup(popup);
        
        // Ajouter les gestionnaires de clic sur les images apr√®s ouverture du popup
        marker.on('popupopen', () => {
          const allImages = [build.mainPhoto, ...build.additionalPhotos];
          
          // Image principale cliquable
          const mainImg = document.querySelector('.build-popup-image');
          if (mainImg) {
            mainImg.style.cursor = 'pointer';
            mainImg.addEventListener('click', () => {
              openLightbox(allImages, 0);
            });
          }
          
          // Images miniatures cliquables
          const thumbs = document.querySelectorAll('.build-popup-thumb');
          thumbs.forEach((thumb, index) => {
            thumb.style.cursor = 'pointer';
            thumb.addEventListener('click', () => {
              openLightbox(allImages, index + 1);
            });
          });
        });
      } else {
        // Sur mobile : ouvrir le modal au clic sur le marqueur
        marker.on('click', (e) => {
          e.originalEvent.stopPropagation();
          e.originalEvent.preventDefault();
          openBuildModal(build);
        });
      }
    });
    
    // Ajuster la vue si des builds existent
    if (buildsData.length > 0) {
      const group = new L.featureGroup(
        buildsData.map(build => L.marker([build.lat, build.lng]))
      );
      map.fitBounds(group.getBounds().pad(0.1));
    }
    
    // Plus d'instructions mobiles n√©cessaires
  });
</script>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .community-map-section {
    padding: 4rem 0 0 0;
    background: var(--gray-900);
  }

  .community-map-section h2 {
    text-align: center;
    font-size: 2.5rem;
    color: var(--gray-100);
    margin-bottom: 2rem;
  }

  .map-container {
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: var(--shadow-lg);
    border: 1px solid var(--gray-800);
  }

  #community-map {
    height: 100%;
    width: 100%;
  }

  /* Styles pour les marqueurs personnalis√©s */
  :global(.build-marker) {
    border: none !important;
    background: transparent !important;
  }

  :global(.build-marker-inner) {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    border: 3px solid var(--accent-regular);
    overflow: hidden;
    background: white;
    cursor: pointer;
    transition: transform 0.2s ease;
  }

  :global(.build-marker-inner:hover) {
    transform: scale(1.1);
  }

  :global(.build-marker-inner img) {
    width: 100% !important;
    height: 100% !important;
    object-fit: cover !important;
    display: block;
  }

  /* Styles pour les popups */
  :global(.build-popup-container .leaflet-popup-content-wrapper) {
    background: var(--gray-999);
    color: var(--gray-100);
    border-radius: 0.5rem;
    box-shadow: var(--shadow-xl);
    max-width: none !important;
    min-width: 300px !important;
  }

  :global(.build-popup-container .leaflet-popup-content) {
    margin: 0 !important;
    overflow-y: auto !important;
    max-height: 450px !important;
    padding: 1rem !important;
  }

  :global(.build-popup-container .leaflet-popup-tip) {
    background: var(--gray-999);
  }

  :global(.build-popup) {
    min-width: 300px;
    max-width: 380px;
  }

  :global(.build-popup-header) {
    margin-bottom: 1rem;
  }

  :global(.build-popup-image) {
    width: 100%;
    height: auto;
    max-height: 200px;
    object-fit: contain;
    border-radius: 0.25rem;
    background: var(--gray-999);
    transition: filter 0.2s ease;
  }

  :global(.build-popup-image:hover) {
    filter: brightness(1.1);
  }

  :global(.build-popup-content h3) {
    margin: 0 0 0.75rem 0;
    color: var(--accent-regular);
    font-size: 1.2rem;
    word-wrap: break-word;
    overflow-wrap: break-word;
    padding: 0 0.5rem;
  }

  :global(.build-popup-content p) {
    margin: 0.5rem 0;
    color: var(--gray-300);
    font-size: 0.9rem;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.4;
    padding: 0 0.5rem;
  }

  :global(.build-description) {
    font-style: italic;
    color: var(--gray-400) !important;
    font-size: 0.85rem !important;
    margin: 0.75rem 0 !important;
    line-height: 1.5 !important;
    word-wrap: break-word !important;
    overflow-wrap: break-word !important;
    white-space: pre-wrap !important;
    max-width: 320px !important;
    padding: 0 0.5rem !important;
  }

  :global(.build-popup-content a) {
    color: var(--accent-regular);
    text-decoration: none;
    padding: 0 0.5rem;
  }

  :global(.build-popup-content a:hover) {
    text-decoration: underline;
  }

  :global(.build-popup-gallery) {
    display: flex;
    gap: 0.5rem;
    margin-top: 1rem;
    flex-wrap: wrap;
    max-width: 350px;
    overflow-x: auto;
    padding: 0 0.5rem 0.5rem 0.5rem;
  }

  :global(.build-popup-thumb) {
    width: 70px;
    height: 70px;
    object-fit: contain;
    border-radius: 0.25rem;
    cursor: pointer;
    border: 2px solid transparent;
    transition: border-color 0.2s ease, transform 0.2s ease;
    background: var(--gray-999);
    flex-shrink: 0;
  }

  :global(.build-popup-thumb:hover) {
    border-color: var(--accent-regular);
    filter: brightness(1.1);
    transform: scale(1.05);
  }

  /* Styles pour les fonctionnalit√©s mobiles */
  :global(.temp-marker) {
    border: none !important;
    background: transparent !important;
  }

  :global(.temp-marker-inner) {
    font-size: 24px;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    animation: bounce 0.6s ease-in-out;
  }

  :global(.coords-toast) {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: var(--accent-regular);
    color: var(--accent-text-over);
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    font-weight: 500;
    font-size: 0.9rem;
    z-index: 10000;
    box-shadow: var(--shadow-lg);
    animation: slideDown 0.3s ease-out;
  }

  :global(.mobile-instructions) {
    background: var(--gray-800);
    border: 1px solid var(--accent-regular);
    border-radius: 0.5rem;
    padding: 1rem;
    margin-bottom: 1rem;
    text-align: center;
  }

  :global(.mobile-instructions p) {
    margin: 0;
    color: var(--gray-300);
    font-size: 0.9rem;
  }

  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateY(0);
    }
    40% {
      transform: translateY(-10px);
    }
    60% {
      transform: translateY(-5px);
    }
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateX(-50%) translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(-50%) translateY(0);
    }
  }

  /* Styles pour le modal mobile */
  .build-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 50001;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    padding: 1rem;
    pointer-events: none;
  }

  .build-modal.active {
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
  }

  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    z-index: 50000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    pointer-events: none;
  }

  .modal-overlay.active {
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
  }

  .build-modal-content {
    background: var(--gray-999);
    border-radius: 1rem;
    max-width: 500px;
    width: 100%;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: var(--shadow-xl);
    border: 1px solid var(--gray-800);
    position: relative;
  }

  .build-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid var(--gray-800);
  }

  .build-modal-header h3 {
    color: var(--accent-regular);
    font-size: 1.3rem;
    margin: 0;
    flex: 1;
    margin-right: 1rem;
  }

  .modal-close {
    background: none;
    border: none;
    color: var(--gray-400);
    font-size: 1.8rem;
    cursor: pointer;
    padding: 0;
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 0.25rem;
    transition: color 0.2s ease, background 0.2s ease;
  }

  .modal-close:hover {
    color: var(--gray-100);
    background: var(--gray-800);
  }

  .build-modal-body {
    padding: 1.5rem;
  }

  .modal-image-container {
    margin-bottom: 1.5rem;
  }

  .modal-main-image {
    width: 100%;
    height: 200px;
    object-fit: contain;
    border-radius: 0.5rem;
    border: 1px solid var(--gray-800);
    background: var(--gray-999);
  }

  .modal-info {
    margin-bottom: 1.5rem;
  }

  .modal-info p {
    color: var(--gray-300);
    margin: 0.5rem 0;
    font-size: 0.95rem;
  }

  .modal-link {
    color: var(--accent-regular) !important;
    text-decoration: none !important;
    font-weight: 500;
  }

  .modal-link:hover {
    text-decoration: underline !important;
  }

  .modal-gallery h4 {
    color: var(--gray-200);
    font-size: 1rem;
    margin-bottom: 1rem;
    margin-top: 0;
  }

  .modal-gallery-thumb {
    width: 80px;
    height: 80px;
    object-fit: contain;
    border-radius: 0.25rem;
    margin-right: 0.5rem;
    margin-bottom: 0.5rem;
    cursor: pointer;
    border: 2px solid transparent;
    transition: border-color 0.2s ease, transform 0.2s ease;
    background: var(--gray-999);
  }

  .modal-gallery-thumb:hover {
    border-color: var(--accent-regular);
    transform: scale(1.05);
  }

  /* Styles pour le lightbox */
  .image-lightbox {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 60001;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }

  .image-lightbox.active {
    opacity: 1;
    visibility: visible;
  }

  .lightbox-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.95);
    z-index: 60000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }

  .lightbox-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  .lightbox-content {
    position: relative;
    width: 100vw;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 3rem;
    box-sizing: border-box;
  }

  .lightbox-image {
    max-width: calc(100% - 6rem);
    max-height: calc(100% - 6rem);
    width: auto;
    height: auto;
    object-fit: contain;
    border-radius: 0.5rem;
    box-shadow: var(--shadow-xl);
  }

  .lightbox-close {
    position: absolute;
    top: 2rem;
    right: 2rem;
    background: rgba(0, 0, 0, 0.7);
    border: none;
    color: white;
    font-size: 2rem;
    cursor: pointer;
    padding: 0.75rem;
    border-radius: 50%;
    width: 3.5rem;
    height: 3.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.2s ease;
    z-index: 1;
  }

  .lightbox-close:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .lightbox-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.7);
    border: none;
    color: white;
    font-size: 2.5rem;
    cursor: pointer;
    padding: 1.25rem;
    border-radius: 0.5rem;
    transition: background 0.2s ease;
    width: 4rem;
    height: 4rem;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1;
  }

  .lightbox-nav:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .lightbox-prev {
    left: 2rem;
  }

  .lightbox-next {
    right: 2rem;
  }

  .lightbox-counter {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    color: white;
    background: rgba(0, 0, 0, 0.8);
    padding: 0.75rem 1.5rem;
    border-radius: 2rem;
    font-size: 1rem;
    font-weight: 500;
  }

  /* Indicateur visuel pour les images cliquables */
  .modal-main-image:hover {
    filter: brightness(1.1);
  }

  .modal-main-image::after {
    content: 'üîç';
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 0.5rem;
    border-radius: 50%;
    opacity: 0;
    transition: opacity 0.2s ease;
    pointer-events: none;
  }

  .modal-image-container {
    position: relative;
  }

  .modal-image-container:hover .modal-main-image::after {
    opacity: 1;
  }

  /* Styles pour la carte plein √©cran mobile */
  .fullscreen-map-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 10003;
    background: var(--gray-999);
    display: flex;
    flex-direction: column;
    transform: translateY(100%);
    transition: transform 0.3s ease;
  }

  .fullscreen-map-container.active {
    transform: translateY(0);
  }

  .fullscreen-map-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background: var(--gray-900);
    border-bottom: 1px solid var(--gray-800);
  }

  .fullscreen-map-header h3 {
    color: var(--accent-regular);
    margin: 0;
    font-size: 1.2rem;
  }

  .fullscreen-close {
    background: none;
    border: none;
    color: var(--gray-400);
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0.5rem;
    width: 2.5rem;
    height: 2.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 0.25rem;
    transition: color 0.2s ease, background 0.2s ease;
  }

  .fullscreen-close:hover {
    color: var(--gray-100);
    background: var(--gray-800);
  }

  .fullscreen-map {
    flex: 1;
    width: 100%;
  }

  .fullscreen-instructions {
    background: var(--gray-800);
    color: var(--gray-300);
    padding: 0.75rem;
    text-align: center;
    font-size: 0.9rem;
    border-top: 1px solid var(--gray-700);
  }

  /* Bouton pour ouvrir la carte plein √©cran */
  .fullscreen-toggle-btn {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: var(--accent-regular);
    color: var(--accent-text-over);
    border: none;
    padding: 0.75rem 1rem;
    border-radius: 0.5rem;
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    z-index: 1000;
    box-shadow: var(--shadow-md);
    transition: all 0.2s ease;
    display: block;
    opacity: 1;
    visibility: visible;
  }

  .fullscreen-toggle-btn:hover {
    background: var(--accent-dark);
    transform: translateY(-1px);
    box-shadow: var(--shadow-lg);
  }

  .map-container {
    position: relative;
  }

  @media (max-width: 768px) {
    .community-map-section h2 {
      font-size: 2rem;
    }

    .map-container {
      height: 300px !important;
    }

    .build-modal {
      padding: 0;
      align-items: stretch;
      justify-content: stretch;
    }

    .build-modal-content {
      width: 100vw;
      height: 100vh;
      max-width: none;
      max-height: none;
      margin: 0;
      border-radius: 0;
      border: none;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
    }

    .modal-main-image {
      height: 250px;
    }

    .build-modal-header {
      padding: 1.5rem;
      flex-shrink: 0;
      background: var(--gray-999);
      border-bottom: 1px solid var(--gray-800);
    }

    .build-modal-body {
      padding: 1.5rem;
      flex: 1;
      overflow-y: auto;
    }

    .modal-gallery-thumb {
      width: 60px;
      height: 60px;
    }

    /* Animation pour mobile - plein √©cran */
    .build-modal {
      transform: translateX(100%);
      transition: transform 0.3s ease;
    }

    .build-modal.active {
      transform: translateX(0);
    }

    /* Lightbox mobile */
    .lightbox-close {
      top: 1rem;
      right: 1rem;
    }

    .lightbox-nav {
      bottom: 2rem;
      top: auto;
      transform: none;
    }

    .lightbox-prev {
      left: 2rem;
    }

    .lightbox-next {
      right: 2rem;
    }

    .lightbox-counter {
      bottom: 6rem;
    }
  }
</style>