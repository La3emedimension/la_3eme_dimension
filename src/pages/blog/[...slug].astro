---
import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import Icon from "../../components/Icon.astro";
import FocalCalculator from "../../components/FocalCalculator.astro";

export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Vérifier si c'est l'article OEP qui nécessite le calculateur
console.log('Entry slug:', entry.slug);
const needsCalculator = entry.slug === 'oep';

// Pour l'article OEP, diviser le contenu au marqueur
let contentParts = null;
if (needsCalculator) {
  const contentHTML = await entry.render().then(result => result.Content);
  // On va traiter cela côté client avec JavaScript
}

// Formatter la date
const formatDate = (date: Date) => {
  return date.toLocaleDateString("fr-FR", {
    year: "numeric",
    month: "long", 
    day: "numeric"
  });
};
---

<BaseLayout
  title={entry.data.title}
  description={`Article de blog : ${entry.data.title}`}
  keywords={`blog, impression 3d, ${entry.data.title.toLowerCase()}`}
  ogImage={entry.data.img ? `https://la3emedim.fr${entry.data.img}` : "https://la3emedim.fr/assets/preview.png"}
>
  <div class="stack gap-20 lg:gap-48">
    <div class="wrapper">
      <header class="blog-header">
        <nav class="breadcrumb">
          <a href="/blog">
            <Icon icon="arrow-left" size="1em" />
            Retour au blog
          </a>
        </nav>
        
        <div class="article-meta">
          <time datetime={entry.data.publishDate.toISOString()}>
            {formatDate(entry.data.publishDate)}
          </time>
          <h1>{entry.data.title}</h1>
        </div>

        {entry.data.img && (
          <img
            src={entry.data.img}
            alt={entry.data.title}
            class="hero-image"
            loading="eager"
            decoding="async"
          />
        )}
      </header>

      <main class="blog-content">
        <Content />
      </main>

      {needsCalculator && (
        <div id="calculator-template" style="display: none;">
          <FocalCalculator />
        </div>
      )}

      <footer class="blog-footer">
        <nav class="back-to-blog">
          <a href="/blog">
            <Icon icon="arrow-left" size="1em" />
            Voir tous les articles
          </a>
        </nav>
      </footer>
    </div>
  </div>
</BaseLayout>

<style>
  .blog-header {
    margin-bottom: 3rem;
  }

  .breadcrumb {
    margin-bottom: 2rem;
  }

  .breadcrumb a {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--accent-regular);
    text-decoration: none;
    font-size: var(--text-sm);
    font-weight: 500;
    transition: color var(--theme-transition);
  }

  .breadcrumb a:hover {
    color: var(--accent-light);
  }

  .article-meta {
    text-align: center;
    margin-bottom: 2rem;
  }

  .article-meta time {
    display: block;
    font-size: var(--text-sm);
    color: var(--gray-400);
    text-transform: uppercase;
    font-weight: 500;
    letter-spacing: 0.05em;
    margin-bottom: 1rem;
  }

  .article-meta h1 {
    font-size: var(--text-4xl);
    font-weight: 700;
    line-height: 1.2;
    background: var(--gradient-accent);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    margin: 0;
  }

  .hero-image {
    width: 100%;
    max-height: 400px;
    object-fit: cover;
    border-radius: 1rem;
    box-shadow: var(--shadow-md);
  }

  .blog-content {
    max-width: 65ch;
    margin: 0 auto;
    line-height: 1.7;
  }

  .blog-content :global(h2) {
    font-size: var(--text-2xl);
    font-weight: 600;
    margin-top: 2rem;
    margin-bottom: 1rem;
    color: var(--gray-100);
  }

  .blog-content :global(h3) {
    font-size: var(--text-xl);
    font-weight: 600;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
    color: var(--gray-200);
  }

  .blog-content :global(p) {
    margin-bottom: 1.5rem;
    color: var(--gray-300);
  }

  .blog-content :global(img) {
    width: 100%;
    height: auto;
    border-radius: 0.5rem;
    margin: 2rem 0;
    box-shadow: var(--shadow-sm);
  }

  .blog-content :global(blockquote) {
    border-left: 4px solid var(--accent-regular);
    padding-left: 1.5rem;
    margin: 2rem 0;
    font-style: italic;
    color: var(--gray-400);
  }

  .blog-content :global(ul),
  .blog-content :global(ol) {
    margin-bottom: 1.5rem;
    padding-left: 2rem;
  }

  .blog-content :global(li) {
    margin-bottom: 0.5rem;
    color: var(--gray-300);
  }

  .blog-content :global(a) {
    color: var(--accent-regular);
    text-decoration: underline;
    text-underline-offset: 0.25em;
    transition: color var(--theme-transition);
  }

  .blog-content :global(a:hover) {
    color: var(--accent-light);
  }

  .blog-content :global(code) {
    background: var(--gray-800);
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.9em;
    color: var(--gray-100);
  }

  .blog-content :global(pre) {
    background: var(--gray-800);
    padding: 1.5rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 2rem 0;
  }

  .blog-content :global(pre code) {
    background: transparent;
    padding: 0;
  }

  .blog-footer {
    margin-top: 4rem;
    padding-top: 2rem;
    border-top: 1px solid var(--gray-800);
    text-align: center;
  }

  .back-to-blog a {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--accent-regular);
    text-decoration: none;
    font-weight: 500;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--accent-regular);
    border-radius: 2rem;
    transition: all var(--theme-transition);
  }

  .back-to-blog a:hover {
    background: var(--accent-regular);
    color: var(--accent-text-over);
  }

  @media (max-width: 50em) {
    .article-meta h1 {
      font-size: var(--text-3xl);
    }

    .blog-content {
      max-width: none;
    }

    .hero-image {
      max-height: 300px;
    }
  }

  /* Styles pour le calculateur de focale */
  .focal-calculator-wrapper {
    margin: 2rem 0;
  }

  .focal-calculator {
    padding: 2rem;
    background: var(--gradient-subtle);
    border-radius: 1rem;
    border: 1px solid var(--gray-800);
  }

  .calculator-container {
    max-width: 500px;
    margin: 0 auto;
  }

  .input-group {
    margin-bottom: 1.5rem;
  }

  .input-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: var(--gray-200);
    font-weight: 500;
  }

  .input-group input {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--gray-700);
    border-radius: 0.5rem;
    background: var(--gray-900);
    color: var(--gray-100);
    font-size: var(--text-base);
    transition: border-color var(--theme-transition);
    box-sizing: border-box;
  }

  .input-group input:focus {
    outline: none;
    border-color: var(--accent-regular);
    box-shadow: 0 0 0 2px rgba(138, 43, 226, 0.2);
  }

  .input-group input::placeholder {
    color: var(--gray-500);
  }

  #calculate-btn {
    width: 100%;
    padding: 0.875rem;
    background: var(--accent-regular);
    color: var(--accent-text-over);
    border: none;
    border-radius: 0.5rem;
    font-size: var(--text-base);
    font-weight: 600;
    cursor: pointer;
    transition: all var(--theme-transition);
    margin-bottom: 1.5rem;
  }

  #calculate-btn:hover {
    background: var(--accent-light);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }

  .focal-calculator .result {
    background: var(--gray-800);
    padding: 1.25rem;
    border-radius: 0.75rem;
    text-align: center;
    margin-bottom: 2rem;
    opacity: 0;
    transform: translateY(10px);
    transition: all var(--theme-transition);
    border: 1px solid var(--gray-700);
  }

  .focal-calculator .result p {
    margin: 0;
    font-size: var(--text-lg);
    color: var(--gray-200);
  }

  .focal-calculator .result span {
    color: var(--accent-regular);
    font-weight: 700;
    font-size: var(--text-xl);
  }

  .recommendations {
    background: var(--gray-950);
    padding: 1.5rem;
    border-radius: 0.75rem;
    border: 1px solid var(--gray-800);
  }

  .recommendations h3 {
    margin-top: 0;
    margin-bottom: 1rem;
    color: var(--gray-100);
    font-size: var(--text-lg);
  }

  .recommendations ul {
    margin: 0;
    padding-left: 1.5rem;
  }

  .recommendations li {
    margin-bottom: 0.75rem;
    color: var(--gray-300);
    line-height: 1.5;
  }

  .recommendations strong {
    color: var(--accent-regular);
  }

  @media (max-width: 50em) {
    .focal-calculator {
      padding: 1.5rem;
      margin: 1.5rem 0;
    }

    .recommendations {
      padding: 1rem;
    }
    
    .recommendations ul {
      padding-left: 1rem;
    }
  }
</style>

<script>
  // Fonction pour configurer les événements du calculateur
  function setupCalculatorEvents() {
    console.log('Setting up calculator events');
    const f1Input = document.getElementById('f1');
    const f2Input = document.getElementById('f2');
    const distanceInput = document.getElementById('distance');
    const result = document.getElementById('result');
    const eyepieceFocal = document.getElementById('eyepiece-focal');

    console.log('Calculator elements after injection:', {
      f1Input: !!f1Input,
      f2Input: !!f2Input,
      distanceInput: !!distanceInput,
      result: !!result,
      eyepieceFocal: !!eyepieceFocal
    });

    if (f1Input && f2Input && distanceInput && result && eyepieceFocal) {
      function calculate() {
        console.log('Calculate function called');
        const f1 = parseFloat(f1Input.value);
        const f2 = parseFloat(f2Input.value);
        const d = parseFloat(distanceInput.value);

        console.log('Values:', {f1, f2, d});

        if (!f1 || !f2 || !d || f1 <= 0 || f2 <= 0 || d < 0) {
          console.log('Invalid values');
          alert('Veuillez entrer des valeurs valides');
          return;
        }

        // Formule : F = (f1*f2) / (f1+f2-d)
        const denominator = f1 + f2 - d;
        console.log('Denominator:', denominator);
        
        if (denominator === 0) {
          alert('Erreur: f1 + f2 - d = 0, calcul impossible');
          return;
        }

        const eyepieceFocalLength = (f1 * f2) / denominator;
        console.log('Result:', eyepieceFocalLength);
        
        eyepieceFocal.textContent = eyepieceFocalLength.toFixed(1);
        result.style.opacity = '1';
        result.style.transform = 'translateY(0)';
        console.log('Result displayed');
      }

      // Calcul en temps réel quand on tape
      [f1Input, f2Input, distanceInput].forEach(input => {
        input.addEventListener('input', function() {
          if (f1Input.value && f2Input.value && distanceInput.value) {
            calculate();
          }
        });
      });

      console.log('Calculator events attached successfully');
    } else {
      console.error('Some calculator elements not found after injection');
    }
  }

  // Injecter le calculateur au bon endroit dans l'article OEP
  document.addEventListener('DOMContentLoaded', function() {
    const blogContent = document.querySelector('.blog-content');
    const calculatorTemplate = document.getElementById('calculator-template');
    
    console.log('needsCalculator from server:', window.location.pathname);
    console.log('Elements found:', {blogContent: !!blogContent, calculatorTemplate: !!calculatorTemplate});
    
    if (blogContent && calculatorTemplate) {
      // Chercher le texte "---SPLIT_CONTENT_HERE---" dans le HTML
      const htmlContent = blogContent.innerHTML;
      
      if (htmlContent.includes('---SPLIT_CONTENT_HERE---')) {
        // Diviser le contenu au marqueur
        const parts = htmlContent.split('---SPLIT_CONTENT_HERE---');
        
        // Recréer le contenu avec le calculateur au milieu
        const calculatorHTML = calculatorTemplate.innerHTML;
        const newContent = parts[0] + calculatorHTML + parts[1];
        
        blogContent.innerHTML = newContent;
        
        console.log('Calculateur injecté avec succès');
        
        // Maintenant attacher les événements du calculateur
        setupCalculatorEvents();
      } else {
        console.log('Marqueur SPLIT_CONTENT_HERE non trouvé');
      }
    } else {
      console.log('Elements non trouvés:', {blogContent, calculatorTemplate});
    }
  });
</script>